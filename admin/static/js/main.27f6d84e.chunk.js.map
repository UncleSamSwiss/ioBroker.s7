{"version":3,"sources":["Tabs/Options.js","Components/TsvDialog.js","Components/DeleteAllDialog.js","Components/DeleteDialog.js","Components/RegisterTable.js","Tabs/BaseRegisters.js","Tabs/Inputs.js","Tabs/Outputs.js","Tabs/Marker.js","Tabs/DBs.js","App.js","serviceWorker.js","index.js"],"names":["FileInput","props","enqueueSnackbar","useSnackbar","onDrop","useCallback","acceptedFiles","onChange","I18n","t","useDropzone","accept","getRootProps","getInputProps","isDragActive","FormControl","style","padding","paddingRight","Typography","variant","gutterBottom","label","className","classes","fileInput","backgroundColor","cursor","Options","inputDisabled","input","inputDisplay","native","params","slot","includes","name","timeFormat","changeParam","value","JSON","parse","stringify","localTSAP","remoteTSAP","rack","changeNative","loadSymbols","e","reader","FileReader","onload","localData","inputs","outputs","markers","text","result","split","forEach","line","typ","slice","replace","d","Name","Address","Type","Description","Unit","poll","RW","WP","push","table","readAsText","addDb","setTimeout","changes","dbs","newParts","indexOf","lines","mapping","attr","process","f","db","trim","match","m","parseInt","undefined","offset","sFields","fields","length","l","obj","Role","Room","console","log","Length","_attr","error","aaa","mm","vv","item","x","shift","dec","join","hasOwnProperty","sort","a","b","aDB","bDB","aOffset","bOffset","state","this","title","Paper","optionsContainer","header","Grid","container","spacing","direction","map","type","optionContainer","FormControlLabel","control","Checkbox","optionsCheckbox","disabled","checked","getValue","target","dimension","InputLabel","shrink","Select","optionsSelect","displayEmpty","options","option","MenuItem","top","bottom","Math","floor","optionsLabel","Input","width","toString","toUpperCase","marginLeft","TextField","optionsTextField","InputProps","endAdornment","InputAdornment","position","Box","tab","xs","md","optionsGrid","getInputsBlock","connectionInputs","getImportsBlock","generalInputs","Component","withStyles","theme","marginBottom","display","textAlign","fontSize","height","border","borderRadius","marginTop","tsvEditor","tsvEditorTextarea","fontFamily","useState","tsv","setTsv","useEffect","tsvResult","field","data","json2tsv","open","Dialog","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","DialogContentText","showPrintMargin","setOptions","firstLineNumber","mode","DialogActions","Button","color","onClick","Utils","copyToClipboard","startIcon","tsv2json","success","errors","index","itemValues","itemIndex","save","DeleteAllDialog","action","DeleteDialog","disableWarnings","setDisableWarnings","_address","DataCell","sortedItem","editMode","setEditMode","ref","useRef","Tooltip","inputRef","tableCheckbox","getDisable","$index","list","rooms","allowNone","dense","themeType","inputProps","tableSelect","tableSelectContainer","find","tableTextFieldContainer","tableTextField","TableCell","clsx","tableCell","nonEditMode","window","localStorage","setItem","current","focus","tableHeader","whiteSpace","fontWeight","tableHeaderExtended","palette","primary","light","dark","tableContainer","overflow","maxHeight","tsvDialogOpen","setTsvDialogOpen","getItem","extendedMode","setExtendedMode","deleteAllDialog","setDeleteAllDialog","deleteDialog","setDeleteDialog","sortedData","getSortedData","orderBy","order","IconButton","addItem","Switch","Table","size","stickyHeader","TableHead","TableRow","filter","expert","formulaDisabled","isChecked","indeterminate","trueFound","falseFound","k","tooltip","newData","changeData","sorted","TableSortLabel","active","isAsc","onChangeOrder","TableBody","hover","ey","lastTime","sessionStorage","Date","deleteItem","disableDialogs","toISOString","BaseRegisters","nativeField","struct","address2struct","bit","struct2address","byte","newItem","getFields","item1","item2","lastItem","role","splice","sortedItem1","sortedItem2","sort1","sort2","a1","a2","lang","getLanguage","Object","values","room","_id","common","getRooms","unshift","types","roles","multiDeviceId","address","parts","parseFloat","setState","Inputs","propTypes","PropTypes","object","isRequired","instance","number","adapterName","string","onError","func","onLoad","changed","bool","socket","Outputs","Marker","Dbs","tabs","component","TabOptions","TabInputs","TabOutputs","TabMarker","App","extendedProps","encryptedFields","translations","require","moreLoaded","getForeignObjects","then","selectedTab","findIndex","loaded","background","default","AppBar","Tabs","getSelectedTab","selectTab","scrollButtons","Tab","icon","data-name","isIFrame","tabContentIFrame","tabContent","TabComponent","errorText","onLoadConfig","cb","updateNativeValue","getIsChanged","renderError","renderSaveCloseButtons","GenericApp","root","minHeight","Boolean","location","hostname","themeName","getThemeName","version","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27f6d84e.chunk.js","sourcesContent":["import {Component, useCallback} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport { useSnackbar } from 'notistack';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport connectionInputs from '../data/optionsConnection';\r\nimport generalInputs from '../data/optionsGeneral';\r\n\r\nconst styles = theme => ({\r\n    optionsSelect: {\r\n        width: 280\r\n    },\r\n    optionsTextField: {\r\n        width: 280\r\n    },\r\n    optionContainer: {\r\n    },\r\n    optionsContainer: {\r\n        width: `calc(100% - ${theme.spacing(4)}px)`,\r\n        padding: theme.spacing(2),\r\n        marginBottom: 20,\r\n        display: 'inline-block',\r\n        textAlign: 'left'\r\n    },\r\n    optionsGrid: {\r\n        textAlign: 'center',\r\n        padding: theme.spacing(2),\r\n    },\r\n    optionsLabel: {\r\n        fontSize: 12,\r\n    },\r\n    header: {\r\n        fontSize: 24,\r\n    },\r\n    fileInput: {\r\n        textAlign: 'center',\r\n        display: 'inline-block',\r\n        height: 80,\r\n        width: 200,\r\n        border: '2px dashed #777',\r\n        borderRadius: 10,\r\n        marginTop: 12,\r\n        padding: 4\r\n    }\r\n});\r\n\r\nlet FileInput = function (props) {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        props.onChange(acceptedFiles);\r\n        enqueueSnackbar(I18n.t('Data updated'));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n      const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop, accept: props.accept});\r\n\r\n      return <FormControl style={{padding: 3, paddingRight: 40}}>\r\n        <Typography variant=\"h6\" gutterBottom>{ I18n.t(props.label)}</Typography>\r\n        <div {...getRootProps()} className={props.classes.fileInput} style={isDragActive ? {backgroundColor: 'rgba(0, 255, 0, 0.1)'} : {cursor: 'pointer'}}>\r\n            <input {...getInputProps()} />\r\n            {\r\n                isDragActive ?\r\n                <p>{I18n.t('Drop the file here ...')}</p> :\r\n                <p>{I18n.t(`Drag 'n' drop file here, or click to select file`)}</p>\r\n            }\r\n        </div>\r\n    </FormControl>;\r\n};\r\n\r\nclass Options extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    getValue(name) {\r\n        if (name === 's7logo') {\r\n            return this.props.native.params.slot === null;\r\n        }\r\n        return this.props.native.params[name];\r\n    }\r\n\r\n    inputDisabled = input => {\r\n        return false;\r\n    }\r\n\r\n    inputDisplay = input => {\r\n        if (this.props.native.params.slot === null) {\r\n            if (['rack', 'slot'].includes(input.name)) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (['localTSAP', 'remoteTSAP'].includes(input.name)) {\r\n                return false;\r\n            }\r\n        }\r\n        if (input.name === 'timeOffset') {\r\n            return ['summer', 'offset'].includes(this.props.native.params.timeFormat);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getInputsBlock(inputs, title) {\r\n        return <Paper className={this.props.classes.optionsContainer}>\r\n            <Typography variant=\"h4\" gutterBottom className={this.props.classes.header}>{I18n.t(title)}</Typography>\r\n            <Grid container spacing={2} direction=\"column\">\r\n                {inputs.map(input => {\r\n                    if (!this.inputDisplay(input)) {\r\n                        return null;\r\n                    }\r\n                    if (input.type === 'checkbox') {\r\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}>\r\n                            <FormControlLabel\r\n                                label={I18n.t(input.title)}\r\n                                control={<Checkbox\r\n                                    label={I18n.t(input.title)}\r\n                                    className={this.props.classes.optionsCheckbox}\r\n                                    disabled={this.inputDisabled(input)}\r\n                                    checked={this.getValue(input.name)}\r\n                                    onChange={e => this.changeParam(input.name, e.target.checked)}\r\n                                />}/> {input.dimension ? I18n.t(input.dimension) : null}</Grid>;\r\n                    } else if (input.type === 'select') {\r\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}>\r\n                            <FormControl>\r\n                                <InputLabel shrink>{I18n.t(input.title)}</InputLabel>\r\n                                <Select\r\n                                    className={this.props.classes.optionsSelect}\r\n                                    displayEmpty\r\n                                    disabled={this.inputDisabled(input)}\r\n                                    value={this.getValue(input.name)}\r\n                                    onChange={e => this.changeParam(input.name, e.target.value)}\r\n                                >\r\n                                    {input.options.map(option =>\r\n                                        <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl> {input.dimension ? I18n.t(input.dimension) : null}\r\n                        </Grid>;\r\n                    } else if (input.type === 'hex') {\r\n                        let value = parseInt(this.getValue(input.name)) ? parseInt(this.getValue(input.name)) : 0;\r\n                        let top = 0;\r\n                        let bottom = 0;\r\n                        if (value > 255) {\r\n                            bottom = value % 256;\r\n                            top = Math.floor(value / 256);\r\n                        } else {\r\n                            bottom = value;\r\n                        }\r\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}>\r\n                            <InputLabel className={this.props.classes.optionsLabel}>{I18n.t(input.title)}</InputLabel>\r\n                            <Input style={{width: '6ch'}} value={top.toString(16) ? top.toString(16).toUpperCase() : 0}\r\n                                   onChange={e => {\r\n                                       if (parseInt(e.target.value, 16) > 255 || parseInt(e.target.value, 16) < 0) {\r\n                                           return;\r\n                                       }\r\n                                       this.changeParam(input.name, bottom + parseInt(e.target.value, 16) * 256);\r\n                                   }}/>\r\n                            <Input style={{marginLeft: 5, width: '6ch'}}\r\n                                   value={bottom.toString(16) ? bottom.toString(16).toUpperCase() : 0} onChange={e => {\r\n                                if (parseInt(e.target.value, 16) > 255 || parseInt(e.target.value, 16) < 0) {\r\n                                    return;\r\n                                }\r\n                                this.changeParam(input.name, top * 256 + parseInt(e.target.value, 16));\r\n                            }}/>\r\n                        </Grid>;\r\n                    } else {\r\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}><TextField\r\n                            type={input.type}\r\n                            label={I18n.t(input.title)}\r\n                            className={this.props.classes.optionsTextField}\r\n                            disabled={this.inputDisabled(input)}\r\n                            value={this.getValue(input.name)}\r\n                            InputProps={{\r\n                                endAdornment: input.dimension ?\r\n                                    <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null\r\n                            }}\r\n                            onChange={e => this.changeParam(input.name, e.target.value)}\r\n                        /></Grid>;\r\n                    }\r\n                })}\r\n            </Grid>\r\n        </Paper>;\r\n    }\r\n\r\n    getImportsBlock() {\r\n        return <><Paper className={this.props.classes.optionsContainer}>\r\n            <Typography variant=\"h4\" gutterBottom className={this.props.classes.header}>{I18n.t('Import')}</Typography>\r\n                <Box className={this.props.classes.optionContainer}>\r\n                <FileInput classes={this.props.classes} onChange={this.loadSymbols} label=\"Load symbols\" accept=\".asc\"/>\r\n                <FileInput classes={this.props.classes} onChange={this.addDb} label=\"Add DB\" accept=\".csv,.prn\"/>\r\n                </Box>\r\n        </Paper></>;\r\n    }\r\n\r\n    render() {\r\n        return <form className={ this.props.classes.tab }>\r\n            <Grid container spacing={2} >\r\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>\r\n                    {this.getInputsBlock(connectionInputs, 'PLC Connection')}\r\n                    {this.getImportsBlock()}\r\n                </Grid>\r\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>{this.getInputsBlock(generalInputs, 'General')}</Grid>\r\n            </Grid>\r\n        </form>;\r\n    }\r\n\r\n    changeParam = (name, value) => {\r\n        let native = JSON.parse(JSON.stringify(this.props.native));\r\n        if (name === 's7logo') {\r\n            if (value) {\r\n                native.params.localTSAP = '';\r\n                native.params.remoteTSAP = '';\r\n                native.params.rack = null;\r\n                native.params.slot = null;\r\n            } else {\r\n                native.params.localTSAP = null;\r\n                native.params.remoteTSAP = null;\r\n                native.params.rack = '';\r\n                native.params.slot = '';\r\n            }\r\n        } else {\r\n            native.params[name] = value;\r\n        }\r\n        this.props.changeNative(native);\r\n    }\r\n\r\n    loadSymbols = e => {\r\n        let native = JSON.parse(JSON.stringify(this.props.native));\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = e => {\r\n            const localData = {\r\n                inputs:  [],\r\n                outputs: [],\r\n                markers: []\r\n//                counter: [],\r\n//                timer: [],\r\n//                dbs: []\r\n            };\r\n            let text = reader.result;\r\n\r\n            text = text.split('126,');\r\n            text.forEach(line => {\r\n                const typ = line.slice(23, 29).replace(/( )/g, '');\r\n\r\n                const d = {\r\n                    Name:         line.slice(0, 23).replace(/( ){2,}/g, ''),\r\n                    Address:      line.slice(29, 36).replace(/( )/g, ''),\r\n                    Type:         line.slice(36, 41).replace(/( )/g, ''),\r\n                    Description:  line.slice(46, 126).replace(/( ){2,}/, ''),\r\n                    Unit:         '',\r\n//                    Role:         '',\r\n//                    Room:         '',\r\n                    poll:         true,\r\n                    RW:           false,\r\n                    WP:           false\r\n                };\r\n\r\n//                    if (typ == 'E' || typ == 'EB' ||typ == 'EW' ||typ == 'ED'||typ == 'PEB'||typ == 'PEW'||typ == 'PED')data.inputs.push(d);\r\n//                    if (typ == 'A' || typ == 'AB' ||typ == 'AW' ||typ == 'AD'||typ == 'PAB'||typ == 'PAW'||typ == 'PAD')data.outputs.push(d);\r\n                if (typ === 'E' || typ === 'EB' || typ === 'EW' || typ === 'ED') localData.inputs.push(d);\r\n                if (typ === 'A' || typ === 'AB' || typ === 'AW' || typ === 'AD') localData.outputs.push(d);\r\n                if (typ === 'M' || typ === 'MB' || typ === 'MW' || typ === 'MD') localData.markers.push(d);\r\n//                if (typ == 'C')data.counter.push(d);\r\n//                if (typ == 'T')data.timer.push(d);\r\n//                if (typ == 'DB')data.dbs.push(d);\r\n            });\r\n\r\n            ['inputs', 'outputs', 'markers'].forEach(table => {\r\n                native[table] = localData[table];\r\n            });\r\n            this.props.changeNative(native);\r\n        };\r\n\r\n        reader.readAsText(e[0], 'ISO-8859-1');\r\n    }\r\n\r\n    addDb = e => {\r\n        let native = JSON.parse(JSON.stringify(this.props.native));\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = e => {\r\n            setTimeout(function () {\r\n                const text       = reader.result;\r\n                const changes  = {\r\n                    inputs: false,\r\n                    outputs: false,\r\n                    markers: false,\r\n                    dbs: false\r\n                };\r\n                const newParts = {\r\n                    inputs:     native.inputs || [],\r\n                    outputs:    native.outputs || [],\r\n                    markers:    native.markers || [],\r\n                    dbs:        native.dbs || []\r\n                };\r\n\r\n                if (text.indexOf('Leseanforderung') !== -1) {\r\n                    // Graphpic format\r\n                    const lines = text.replace(/\\r\\n/g, '\\n').split('\\n');\r\n                    const mapping = {\r\n                        'Name':             {attr: 'Name'},\r\n                        'Typ':              {attr: ''},\r\n                        'Operand':          {attr: 'Address',       process: f => {\r\n                            // DB 504.DBW 1462 => DB504 1462\r\n                            f = f.trim();\r\n                            const db     = f.match(/^DB (\\d+)/);\r\n                            if (!db) {\r\n                                // M\r\n                                // MB\r\n                                let m = f.match(/^MB? (\\d+)\\.?(\\d+)?$/);\r\n                                if (m) {\r\n                                    return 'M ' + parseInt(m[1], 10) + (m[2] !== undefined ? '.' + m[2] : '');\r\n                                } else {\r\n                                    m = f.match(/^AB? (\\d+)\\.?(\\d+)?$/);\r\n                                    if (m) {\r\n                                        return 'OUT ' + parseInt(m[1], 10) + (m[2] !== undefined ? '.' + m[2] : '');\r\n                                    } else {\r\n                                        m = f.match(/^EB? (\\d+)\\.?(\\d+)?$/);\r\n                                        if (m) {\r\n                                            return 'IN ' + parseInt(m[1], 10) + (m[2] !== undefined ? '.' + m[2] : '');\r\n                                        } else {\r\n                                            return f;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            const offset = f.match(/(\\d+).?(\\d+)?$/);\r\n                            if (db && offset) {\r\n                                return `DB${db[1]} ${offset[1]}${offset[2] !== undefined ? '.' + offset[2] : ''}`;\r\n                            } else {\r\n                                return f;\r\n                            }\r\n                        }},\r\n                        'SPS-Format':       {attr: 'Type',          process: function (f) {return f;} },\r\n                        'Byteanzahl':       {attr: 'Length',        process: function (f) {return parseInt(f, 10);} },\r\n                        'Zugriff':          {attr: 'RW',            process: function (f) {return f !== 'read';} },\r\n                        'Leseanforderung':  {attr: 'poll',          process: function (f) {return f === 'zyklisch';} },\r\n                        'AktZeit (ms)':     {attr: ''},\r\n                        'Kommentar':        {attr: 'Description'},\r\n                        'Clients (Anzahl)': {attr: ''}\r\n                    };\r\n                    // First line\r\n                    // \"Name\",\"Typ\",\"Operand\",\"SPS-Format\",\"Byteanzahl\",\"Zugriff\",\"Leseanforderung\",\"AktZeit (ms)\",\"Kommentar\",\"Clients (Anzahl)\"\r\n                    let sFields = lines[0].split(',');\r\n                    // create mapping\r\n                    const fields = [];\r\n                    for (let m = 0; m < sFields.length; m++) {\r\n                        sFields[m] = sFields[m].replace(/\"/g, '');\r\n                        fields.push(mapping[sFields[m]]);\r\n                    }\r\n                    for (let l = 1; l < lines.length; l++) {\r\n                        lines[l] = lines[l].trim();\r\n                        if (!lines[l]) continue;\r\n                        sFields = lines[l].trim().split(',');\r\n                        let obj = {\r\n                            Type:           'ARRAY',\r\n                            Unit:           '',\r\n                            Role:           '',\r\n                            Room:           '',\r\n                            poll:           true,\r\n                            RW:             false,\r\n                            WP:             false\r\n                        };\r\n                        for (let f = 0; f < fields.length; f++) {\r\n                            if (!fields[f].attr) {\r\n                                continue;\r\n                            }\r\n                            if (!sFields[f]) {\r\n                                console.log('error');\r\n                                break;\r\n                            }\r\n                            sFields[f] = sFields[f].replace(/\"/g, '');\r\n                            obj[fields[f].attr] = fields[f].process ? fields[f].process(sFields[f]) : sFields[f];\r\n\r\n                            if (obj.Name.match(/^@/)) {\r\n                                obj = null;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (obj) {\r\n                            if (obj.Type === 'BYTE' && obj.Length !== 1) {\r\n                                obj.Type = 'ARRAY';\r\n                            }\r\n                            if (obj.Type === 'CHAR') {\r\n                                obj.Type = 'STRING';\r\n                            }\r\n                            if (obj.Type === 'BYTE' || obj.Type === 'BOOL' || obj.Type === 'INT') {\r\n                                obj.Length = '';\r\n                            }\r\n                            let _attr;\r\n                            if (obj.Address.match(/^DB/)) {\r\n                                _attr = 'dbs';\r\n                            } else if (obj.Address.match(/^IN/)) {\r\n                                obj.Address = obj.Address.replace(/^IN\\s?/, '');\r\n                                _attr = 'inputs';\r\n                            } else if (obj.Address.match(/^OUT/)) {\r\n                                _attr = 'outputs';\r\n                                obj.Address = obj.Address.replace(/^OUT\\s?/, '');\r\n                            } else if (obj.Address.match(/^M/)) {\r\n                                _attr = 'markers';\r\n                                obj.Address = obj.Address.replace(/^M\\s?/, '');\r\n                            } else {\r\n                                console.error('Unknown TYPE: ' + obj.Address);\r\n                                continue;\r\n                            }\r\n                            // try to find same address\r\n                            for (let aaa = 0; aaa < newParts[_attr].length; aaa++) {\r\n                                if (newParts[_attr][aaa].Address === obj.Address) {\r\n                                    newParts[_attr][aaa] = obj;\r\n                                    changes[_attr] = true;\r\n                                    obj = null;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (obj) {\r\n                                changes[_attr] = true;\r\n                                newParts[_attr].push(obj);\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    const mm = text.match(/(DB)[0-9]+\\s-\\s/g);\r\n                    const db = mm ? mm[0].replace(' - ', '') : '';\r\n                    const vv = text.split('STRUCT');\r\n\r\n                    const struck = vv[1] ? vv[1].split('=')[0].split('\\n') : [];\r\n\r\n                    struck.forEach((item) => {\r\n                        if (item.length > 10) {\r\n                            const x = item.split(/\\s+/g);\r\n                            x.shift();\r\n\r\n                            let obj = {\r\n                                Address:        db + ' ' + x.shift(),\r\n                                Name:           x.shift(),\r\n                                Type:           x.shift(),\r\n                                dec:            x.shift(),\r\n                                Description:    x.join(' '),\r\n                                Unit:           '',\r\n                                Role:           '',\r\n                                Room:           '',\r\n                                poll:           true,\r\n                                RW:             false,\r\n                                WP:             false\r\n                            };\r\n\r\n                            // try to find same address\r\n                            for (let aaa = 0; aaa < newParts.dbs.length; aaa++) {\r\n                                if (newParts.dbs[aaa].Address === obj.Address) {\r\n                                    newParts.dbs[aaa] = obj;\r\n                                    changes.dbs = true;\r\n                                    obj = null;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (obj) {\r\n                                changes.dbs = true;\r\n                                newParts.dbs.push(obj);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                for (const attr in newParts) {\r\n                    if (!newParts.hasOwnProperty(attr)) {\r\n                        continue;\r\n                    }\r\n                    newParts[attr].sort((a, b) => {\r\n                        const aDB = a.Address.match(/^D?B?\\s?(\\d+)/);\r\n                        const bDB = b.Address.match(/^D?B?\\s?(\\d+)/);\r\n                        if (!aDB) return -1;\r\n                        if (!bDB) return 1;\r\n                        if (parseInt(aDB[1], 10) > parseInt(bDB[1], 10)) return 1;\r\n                        if (parseInt(aDB[1], 10) < parseInt(bDB[1], 10)) return -1;\r\n                        const aOffset = a.Address.match(/\\s(\\d+).?(\\d+)?$/);\r\n                        const bOffset = b.Address.match(/\\s(\\d+).?(\\d+)?$/);\r\n                        if (!aOffset) return -1;\r\n                        if (!bOffset) return 1;\r\n                        if (parseInt(aOffset[1], 10) > parseInt(bOffset[1], 10)) return 1;\r\n                        if (parseInt(aOffset[1], 10) < parseInt(bOffset[1], 10)) return -1;\r\n                        if (aOffset[2] === undefined && bOffset[2] !== undefined) return 1;\r\n                        if (bOffset[2] === undefined && aOffset[2] !== undefined) return -1;\r\n                        if (aOffset[2] === undefined && bOffset[2] === undefined) return 0;\r\n                        if (parseInt(aOffset[2], 10) > parseInt(bOffset[2], 10)) return 1;\r\n                        if (parseInt(aOffset[2], 10) < parseInt(bOffset[1], 10)) return -1;\r\n                        return 0;\r\n                    });\r\n                }\r\n                if (changes.dbs) {\r\n                    native.dbs = newParts.dbs;\r\n                }\r\n                if (changes.inputs) {\r\n                    native.inputs = newParts.inputs;\r\n                }\r\n                if (changes.outputs) {\r\n                    native.outputs = newParts.outputs;\r\n                }\r\n                if (changes.markers) {\r\n                    native.markers = newParts.markers;\r\n                }\r\n                console.log(native);\r\n                //this.props.changeNative(native);\r\n            }, 200);\r\n        };\r\n\r\n        reader.readAsText(e[0], 'ISO-8859-1');\r\n    }\r\n}\r\n\r\nOptions.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Options);\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport { tsv2json, json2tsv } from 'tsv-json';\r\nimport { useSnackbar } from 'notistack';\r\nimport AceEditor from \"react-ace\";\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nconst styles = theme => ({\r\n    tsvEditor: {\r\n        width: '100%',\r\n        height: 400\r\n    },\r\n    tsvEditorTextarea: {\r\n        fontFamily: 'monospace'\r\n    }\r\n});\r\n\r\nconst TsvDialog = (props) => {\r\n    const [tsv, setTsv] = useState('');\r\n    useEffect(() => {\r\n        let tsvResult = [];\r\n        tsvResult.push(props.fields.map(field => field.name));\r\n        props.data.forEach(item =>\r\n            tsvResult.push(props.fields.map(field => item[field.name] !== undefined ? item[field.name].toString() : ''))\r\n        );\r\n        setTsv(json2tsv(tsvResult));\r\n    }, [props.open]); // eslint-disable-line react-hooks/exhaustive-deps\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    if (!props.open) {\r\n        return null;\r\n    }\r\n\r\n    const saveTsv = () => {\r\n        let data = tsv2json(tsv);\r\n        let fields = data.shift();\r\n        let success = true;\r\n        let errors = [];\r\n        for (let index in props.fields) {\r\n            if (props.fields[index].name !== fields[index]) {\r\n                errors.push(<>No field <i>{props.fields[index].name}</i> in position <i>{parseInt(index) + 1}</i>!</>);\r\n                success = false;\r\n            }\r\n        }\r\n\r\n        data = data.map((itemValues, itemIndex) => {\r\n            let item = {};\r\n            for (let index in props.fields) {\r\n                if (props.fields[index].type === 'select' && !props.fields[index].options.map(option => option.value).includes(itemValues[index])) {\r\n                    errors.push(<>Value <i>{itemValues[index]}</i> is wrong for field <i>{props.fields[index].name}</i> in position <i>{parseInt(itemIndex) + 1}</i>!</>);\r\n                    success = false;\r\n                }\r\n                if (props.fields[index].type === 'checkbox') {\r\n                    itemValues[index] = itemValues[index] === 'true' ? true : false;\r\n                }\r\n                item[props.fields[index].name] = itemValues[index];\r\n            }\r\n            return item;\r\n        });\r\n\r\n        if (!success) {\r\n            enqueueSnackbar(<div>{errors.map((error, index) => <div key={index}>{error}</div>)}</div>, { variant: 'error' });\r\n            return;\r\n        }\r\n        props.save(data);\r\n        props.onClose();\r\n    };\r\n\r\n    return <Dialog\r\n        open={props.open}\r\n        onClose={props.onClose}\r\n        maxWidth=\"lg\"\r\n        fullWidth\r\n    >\r\n        <DialogTitle>{I18n.t('Edit data as TSV')}</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>{I18n.t('You can copy, paste and edit data as TSV.')}</DialogContentText>\r\n            <div>\r\n                <AceEditor\r\n                    onChange={e => setTsv(e)}\r\n                    height=\"400px\"\r\n                    showPrintMargin={false}\r\n                    value={tsv}\r\n                    className={props.classes.tsvEditor}\r\n                    width=\"100%\"\r\n                    setOptions={{firstLineNumber: 0}}\r\n                    mode={null}\r\n                />\r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                Utils.copyToClipboard(tsv);\r\n                enqueueSnackbar(I18n.t('TSV was copied to clipboard'));\r\n            }} startIcon={<FileCopyIcon />}>{I18n.t('Copy to clipboard')}</Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={saveTsv} startIcon={<SaveIcon />}>{I18n.t('Import')}</Button>\r\n            <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Close')}</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}\r\n\r\nTsvDialog.propTypes = {\r\n    open: PropTypes.bool,\r\n    onClose: PropTypes.func,\r\n    classes: PropTypes.object,\r\n    save: PropTypes.func,\r\n    fields: PropTypes.array,\r\n    data: PropTypes.array\r\n}\r\n\r\nexport default withStyles(styles)(TsvDialog);","import PropTypes from 'prop-types';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst DeleteAllDialog = (props) => {\r\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\r\n        <DialogTitle>{I18n.t('Delete all items')}</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>{I18n.t('Are you sure to delete all items?')}</DialogContentText>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\r\n                    props.action();\r\n                    props.onClose();\r\n                }}>{I18n.t('Delete all items')}</Button>\r\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\r\n            </DialogActions>\r\n        </DialogContent>\r\n    </Dialog> : null;\r\n}\r\n\r\nDeleteAllDialog.propTypes = {\r\n    open: PropTypes.bool,\r\n    action: PropTypes.func,\r\n    onClose: PropTypes.func,\r\n    classes: PropTypes.object,\r\n}\r\n\r\nexport default DeleteAllDialog;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst DeleteDialog = (props) => {\r\n    const [disableWarnings, setDisableWarnings] = useState(false);\r\n    useEffect(() => {\r\n        setDisableWarnings(false);\r\n    }, [props.open]);\r\n\r\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\r\n        <DialogTitle>{I18n.t('Delete item')}</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>{I18n.t('Are you sure to delete item with address \"%s\"?', props.item._address)}</DialogContentText>\r\n            <DialogContentText><FormControlLabel\r\n                label={I18n.t('Don\\'t show this message in 5 minutes')}\r\n                control={<Checkbox\r\n                    checked={disableWarnings}\r\n                    onChange={e => setDisableWarnings(e.target.checked)}\r\n            />}/></DialogContentText>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\r\n                    props.action(disableWarnings);\r\n                    props.onClose();\r\n                }}>{I18n.t('Delete')}</Button>\r\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\r\n            </DialogActions>\r\n        </DialogContent>\r\n    </Dialog> : null;\r\n}\r\n\r\nDeleteDialog.propTypes = {\r\n    open: PropTypes.bool,\r\n    onClose: PropTypes.func,\r\n    classes: PropTypes.object,\r\n    action: PropTypes.func,\r\n    item: PropTypes.object,\r\n}\r\n\r\nexport default DeleteDialog;","import { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ImportExport from '@material-ui/icons/ImportExport';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nimport ExpertIcon from '@iobroker/adapter-react/icons/IconExpert';\r\nimport TextWithIcon from '@iobroker/adapter-react/Components/TextWithIcon';\r\nimport SelectWithIcon from '@iobroker/adapter-react/Components/SelectWithIcon';\r\n\r\nimport TsvDialog from './TsvDialog';\r\nimport DeleteAllDialog from './DeleteAllDialog';\r\nimport DeleteDialog from './DeleteDialog';\r\n\r\nconst styles = theme => ({\r\n    tableHeader: {\r\n        whiteSpace: 'nowrap',\r\n        fontWeight: 'bold',\r\n        fontSize: '80%',\r\n        padding: '0px 8px'\r\n    },\r\n    tableHeaderExtended: {\r\n        color: theme.palette.type === 'dark' ? theme.palette.primary.light : theme.palette.primary.dark\r\n    },\r\n    tableCell: {\r\n        whiteSpace: 'nowrap',\r\n        fontSize: '80%',\r\n        padding: '0px 8px'\r\n    },\r\n    tableContainer: {\r\n        overflow: 'auto',\r\n        maxHeight: 'calc(100vh - 180px)'\r\n    },\r\n    tableTextField: {\r\n        fontSize: '80%'\r\n    },\r\n    tableSelect: {\r\n        fontSize: '80%'\r\n    },\r\n    tableTextFieldContainer: {\r\n        width: '100%'\r\n    },\r\n    tableSelectContainer: {\r\n        width: '100%'\r\n    },\r\n    nonEditMode: {\r\n        cursor: 'pointer'\r\n    }\r\n});\r\n\r\nconst DataCell = props => {\r\n    const sortedItem = props.sortedItem;\r\n    const field = props.field;\r\n    const editMode = props.editMode;\r\n    const setEditMode = props.setEditMode;\r\n\r\n    const ref = useRef();\r\n    // useEffect(() => {\r\n    //     if (props.editMode) {\r\n    //         // ref.current && ref.current.focus()\r\n    //         //window.setTimeout(() => ref.current && ref.current.focus(), 1000);\r\n    //     }\r\n    // }, [props.editMode])\r\n\r\n    let item = sortedItem.item;\r\n    let result;\r\n    if (field.type === 'checkbox') {\r\n        if (!editMode) {\r\n            result = <Checkbox\r\n                checked={!!item[field.name]}\r\n                disabled\r\n            />;\r\n        } else {\r\n            result = <Tooltip title={I18n.t(field.title)}>\r\n                <Checkbox\r\n                    inputRef={ref}\r\n                    className={props.classes.tableCheckbox}\r\n                    checked={!!item[field.name]}\r\n                    disabled={props.getDisable(sortedItem.$index, field.name)}\r\n                    onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.checked)}\r\n                />\r\n            </Tooltip>;\r\n        }\r\n    } else if (field.type === 'rooms') {\r\n        if (!editMode) {\r\n            result = <TextWithIcon list={props.rooms} value={item[field.name]} themeType={props.themeType}/>;\r\n        } else {\r\n            result = <SelectWithIcon\r\n                list={props.rooms}\r\n                allowNone={true}\r\n                value={item[field.name]}\r\n                dense={true}\r\n                themeType={props.themeType}\r\n                inputProps={{ref, className: props.classes.tableSelect}}\r\n                disabled={props.getDisable(sortedItem.$index, field.name)}\r\n                onChange={value => props.changeParam(sortedItem.$index, field.name, value)}\r\n                className={props.classes.tableSelectContainer}\r\n            />;\r\n        }\r\n    } else if (field.type === 'select') {\r\n        if (!editMode) {\r\n            let option = field.options.find(option => option.value === item[field.name]);\r\n            result = option ? option.title : '';\r\n        } else {\r\n            result = <Select\r\n                value={item[field.name]}\r\n                inputProps={{ref, className: props.classes.tableSelect}}\r\n                disabled={props.getDisable(sortedItem.$index, field.name)}\r\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\r\n                className={props.classes.tableSelectContainer}\r\n            >\r\n                {field.options.map(option =>\r\n                    <MenuItem key={option.value} value={option.value}>{option.title ? option.title : <i>{I18n.t('Nothing')}</i>}</MenuItem>\r\n                )}\r\n            </Select>;\r\n        }\r\n    } else {\r\n        if (!editMode) {\r\n            result = item[field.name] ? item[field.name] : null;\r\n        } else {\r\n            result = <TextField value={item[field.name]} className={props.classes.tableTextFieldContainer}\r\n                inputProps={{ref: ref, className: props.classes.tableTextField}}\r\n                type={field.type}\r\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\r\n                disabled={props.getDisable(sortedItem.$index, field.name)}\r\n            />;\r\n        }\r\n    }\r\n\r\n    return <TableCell\r\n        className={Utils.clsx(props.classes.tableCell, !editMode && props.classes.nonEditMode)}\r\n        onClick={e => {\r\n            setEditMode(true);\r\n            window.localStorage.setItem('Modbus.editMode', 'true');\r\n            window.setTimeout(() => ref.current && ref.current.focus(), 100);\r\n        }}\r\n    >\r\n        {result}\r\n    </TableCell>;\r\n}\r\n\r\nconst RegisterTable = props => {\r\n    const [tsvDialogOpen, setTsvDialogOpen] = useState(false);\r\n    const [editMode, setEditMode] = useState(window.localStorage.getItem('Modbus.editMode') !== 'false');\r\n    const [extendedMode, setExtendedMode] = useState(window.localStorage.getItem('Modbus.extendedMode') === 'true');\r\n    const [deleteAllDialog, setDeleteAllDialog] = useState({\r\n        open: false,\r\n        action: null,\r\n    });\r\n    const [deleteDialog, setDeleteDialog] = useState({\r\n        open: false,\r\n        item: null,\r\n        action: null,\r\n    });\r\n\r\n    let sortedData = props.getSortedData(props.data, props.orderBy, props.order);\r\n\r\n    return <div>\r\n        <div>\r\n            <Tooltip title={I18n.t('Add line')}>\r\n                <IconButton onClick={e => props.addItem()}>\r\n                    <AddIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title={I18n.t('Edit as TSV (Tab separated values)')}>\r\n                <IconButton onClick={() => setTsvDialogOpen(true)}>\r\n                    <ImportExport/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <FormControlLabel\r\n                control={<Switch checked={editMode} onChange={e => {\r\n                    setEditMode(e.target.checked);\r\n                    window.localStorage.setItem('Modbus.editMode', e.target.checked);\r\n                }}/>}\r\n                label={I18n.t('Edit mode')}\r\n            />\r\n            <Tooltip title={I18n.t('Toggle extended mode')}>\r\n                <IconButton\r\n                    color={extendedMode ? 'primary' : 'inherit'}\r\n                    onClick={() => {\r\n                        window.localStorage.setItem('Modbus.extendedMode', extendedMode ? 'false' : 'true');\r\n                        setExtendedMode(!extendedMode);\r\n                    }}>\r\n                    <ExpertIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n        </div>\r\n        <div className={props.classes.tableContainer}>\r\n            <Table size=\"small\"\r\n                   stickyHeader\r\n                   padding=\"none\"\r\n            >\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field => {\r\n                            let isChecked = false;\r\n                            let indeterminate = false;\r\n                            let trueFound = false;\r\n                            let falseFound = false;\r\n                            for (let k in props.data) {\r\n                                if (props.data[k][field.name]) {\r\n                                    isChecked = true;\r\n                                    trueFound = true;\r\n                                } else {\r\n                                    isChecked = false;\r\n                                    falseFound = true;\r\n                                }\r\n\r\n                                if (trueFound && falseFound) {\r\n                                    indeterminate = true;\r\n                                    isChecked = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            return <TableCell\r\n                                key={field.name}\r\n                                style={{width: field.type === 'checkbox' ? 20 : field.width}}\r\n                                className={Utils.clsx(props.classes.tableHeader, field.expert && props.classes.tableHeaderExtended)}\r\n                                title={field.tooltip ? I18n.t(field.tooltip) : null}\r\n                            >\r\n                                {field.type === 'checkbox' ?\r\n                                    <Tooltip title={I18n.t('Change all')}>\r\n                                        <Checkbox\r\n                                            indeterminate={indeterminate}\r\n                                            checked={isChecked}\r\n                                            onChange={e => {\r\n                                                let newData = JSON.parse(JSON.stringify(props.data));\r\n                                                newData.forEach(item =>\r\n                                                    item[field.name] = e.target.checked);\r\n                                                props.changeData(newData);\r\n                                            }}\r\n                                        />\r\n                                    </Tooltip>\r\n                                    : null}\r\n                                {field.sorted ? <TableSortLabel\r\n                                    active={field.name === props.orderBy}\r\n                                    direction={props.order}\r\n                                    onClick={e => {\r\n                                        const isAsc = props.orderBy === field.name && props.order === 'asc';\r\n                                        props.onChangeOrder(field.name, isAsc ? 'desc' : 'asc');\r\n                                    }}\r\n                                >{I18n.t(field.title)}</TableSortLabel> : I18n.t(field.title)}\r\n                            </TableCell>\r\n                        })}\r\n                        <TableCell>\r\n                            <Tooltip title={I18n.t('Delete all')}>\r\n                                <div>\r\n                                    <IconButton\r\n                                        size=\"small\"\r\n                                        onClick={e => setDeleteAllDialog({\r\n                                            open: true,\r\n                                            action: () => props.changeData([]),\r\n                                        })}\r\n                                        disabled={!props.data.length}\r\n                                    >\r\n                                        <DeleteIcon/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </Tooltip>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        sortedData.map(sortedItem =>\r\n                            <TableRow hover key={sortedItem.$index}>\r\n                                {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field =>\r\n                                    <DataCell\r\n                                        key={field.name}\r\n                                        themeType={props.themeType}\r\n                                        sortedItem={sortedItem}\r\n                                        field={field}\r\n                                        editMode={editMode}\r\n                                        rooms={props.rooms}\r\n                                        setEditMode={setEditMode}\r\n                                        ey={field.name}\r\n                                        {...props}\r\n                                    />\r\n                                )}\r\n                                <TableCell>\r\n                                    <Tooltip title={I18n.t('Delete')}>\r\n                                        <div>\r\n                                            <IconButton size=\"small\" onClick={e => {\r\n                                                let lastTime = window.sessionStorage.getItem('disableDeleteDialogs');\r\n                                                if (lastTime && (new Date() - new Date(lastTime)) < 1000 * 60 * 5) {\r\n                                                    props.deleteItem(sortedItem.$index);\r\n                                                    return;\r\n                                                }\r\n                                                setDeleteDialog({\r\n                                                    open: true,\r\n                                                    action: disableDialogs => {\r\n                                                        if (disableDialogs) {\r\n                                                            window.sessionStorage.setItem('disableDeleteDialogs', (new Date()).toISOString());\r\n                                                        }\r\n                                                        props.deleteItem(sortedItem.$index);\r\n                                                    },\r\n                                                    item: sortedItem.item\r\n                                                })\r\n                                            }}>\r\n                                                <DeleteIcon/>\r\n                                            </IconButton>\r\n                                        </div>\r\n                                    </Tooltip>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </div>\r\n        <TsvDialog\r\n            open={tsvDialogOpen}\r\n            save={props.changeData}\r\n            onClose={() => setTsvDialogOpen(false)}\r\n            data={props.data}\r\n            fields={props.fields}\r\n        />\r\n        <DeleteAllDialog\r\n            open={deleteAllDialog.open}\r\n            action={deleteAllDialog.action}\r\n            onClose={() => setDeleteAllDialog({\r\n                open: false,\r\n                action: null,\r\n            })}\r\n        />\r\n        <DeleteDialog\r\n            open={deleteDialog.open}\r\n            action={deleteDialog.action}\r\n            onClose={() => setDeleteDialog({\r\n                open: false,\r\n                action: null,\r\n                item: null\r\n            })}\r\n            item={deleteDialog.item}\r\n        />\r\n    </div>;\r\n}\r\n\r\nRegisterTable.propTypes = {\r\n    data: PropTypes.array,\r\n    fields: PropTypes.array,\r\n    classes: PropTypes.object,\r\n    addItem: PropTypes.func,\r\n    changeData: PropTypes.func,\r\n    deleteItem: PropTypes.func,\r\n    rooms: PropTypes.object,\r\n    formulaDisabled: PropTypes.bool,\r\n    getSortedData: PropTypes.func,\r\n    themeType: PropTypes.string,\r\n}\r\n\r\nexport default withStyles(styles)(RegisterTable);","import {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport roles from '../data/roles';\r\nimport types from '../data/types';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport RegisterTable from '../Components/RegisterTable';\r\n\r\nclass BaseRegisters extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.nativeField = '';\r\n        this.state = {\r\n            order: window.localStorage.getItem('Modbus.order') || 'asc',\r\n            orderBy: window.localStorage.getItem('Modbus.orderBy') || 'Address',\r\n        };\r\n    }\r\n\r\n    getRooms() {\r\n        const lang = I18n.getLanguage();\r\n        return this.props.rooms ? Object.values(this.props.rooms).map(room => ({\r\n            value: room._id,\r\n            title: typeof room.common.name === 'object' ? room.common.name[lang] : room.common.name\r\n        })) : [];\r\n    }\r\n\r\n    getFields() {\r\n        let rooms = this.getRooms();\r\n        rooms.unshift({value: '', title: ''});\r\n\r\n        let result = [\r\n            {name: 'Address', title: 'Address', type: 'text', sorted: true, width: 20},\r\n            {name: 'Name', title: 'Name', type: 'text', sorted: true},\r\n            {name: 'Description', title: 'Description', type: 'text', sorted: true},\r\n            {name: 'Type', title: 'Type', type: 'select', options: types, sorted: true},\r\n            {name: 'Length', title: 'Length', type: 'text', width: 20},\r\n            {name: 'Unit', title: 'Unit', type: 'text', width: 30},\r\n            {name: 'Role', title: 'Role', type: 'select', options: roles, sorted: true},\r\n            {name: 'Room', title: 'Room', type: 'rooms', options: rooms, sorted: true},\r\n            {name: 'poll', title: 'Poll', type: 'checkbox'},\r\n            {name: 'RW', title: 'RW', type: 'checkbox', expert: true},\r\n            {name: 'WP', title: 'WP', type: 'checkbox', expert: true},\r\n        ]\r\n\r\n        if (this.props.native.params.multiDeviceId) {\r\n            result.splice(1, 0,\r\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    address2struct(address) {\r\n        if (this.nativeField === 'dbs') {\r\n            const parts = address.split(' ');\r\n            const db = parseInt(parts[0].replace('DB', '').replace('db', '').trim(), 10);\r\n            if (parts[1].includes('.')) {\r\n                const a = parseFloat(parts[1]);\r\n                return {db, byte: Math.floor(a), bit: (a * 10) % 10};\r\n            } else {\r\n                return {db, byte: parseInt(parts[1], 10)};\r\n            }\r\n        } else {\r\n            if (address.includes('.')) {\r\n                const a = parseFloat(address);\r\n                return {byte: Math.floor(a), bit: (a * 10) % 10};\r\n            } else {\r\n                return {byte: parseInt(address, 10)};\r\n            }\r\n        }\r\n    }\r\n\r\n    struct2address(struct) {\r\n        if (struct.db !== undefined) {\r\n            if (struct.bit !== undefined) {\r\n                return 'DB' + struct.db + ' ' + struct.byte + '.' + struct.bit;\r\n            } else  {\r\n                return 'DB' + struct.db + ' ' + struct.byte;\r\n            }\r\n        } else if (struct.bit !== undefined) {\r\n            return struct.byte + '.' + struct.bit;\r\n        } else  {\r\n            return struct.byte;\r\n        }\r\n    }\r\n\r\n    changeParam = (index, name, value) => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        data[index][name] = value;\r\n        if (name === 'Type') {\r\n            if (['BOOL'].includes(value)) {\r\n                data[index].Length = 0.1;\r\n            } else\r\n            if (['', 'BYTE'].includes(value)) {\r\n                data[index].Length = 1;\r\n            } else\r\n            if (['WORD', 'INT', 'STRING', 'S5TIME'].includes(value)) {\r\n                data[index].Length = 2;\r\n            } else\r\n            if (['DWORD', 'DINT', 'REAL'].includes(value)) {\r\n                data[index].Length = 4;\r\n            } else\r\n            if (['S7TIME'].includes(value)) {\r\n                data[index].Length = 8;\r\n            } else\r\n            if (['S7STRING', 'ARRAY'].includes(value)) {\r\n                data[index].Length = 32;\r\n            }\r\n\r\n            if (value === 'BOOL') {\r\n                const struct = this.address2struct(data[index].Address);\r\n                if (struct.bit === undefined) {\r\n                    struct.bit = 0;\r\n                    data[index].Address = this.struct2address(struct);\r\n                }\r\n            } else {\r\n                const struct = this.address2struct(data[index].Address);\r\n                if (struct.bit !== undefined) {\r\n                    if (struct.bit > 0) {\r\n                        struct.byte++;\r\n                    }\r\n                    delete struct.bit;\r\n\r\n                    data[index].Address = this.struct2address(struct);\r\n                }\r\n            }\r\n        }\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    addItem = () => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        let newItem = {}\r\n        this.getFields().forEach(field => newItem[field.name] = '')\r\n        if (data.length) {\r\n            let sortedData = JSON.parse(JSON.stringify(data));\r\n            sortedData.sort((item1, item2) => item1.Address > item2.Address ? 1 : -1);\r\n            let lastItem = sortedData[sortedData.length - 1];\r\n            const struct = this.address2struct(lastItem.Address);\r\n            if (lastItem.Type === 'BOOL') {\r\n                struct.bit = struct.bit || 0;\r\n                struct.bit++;\r\n                if (struct.bit >= 8) {\r\n                    struct.bit = struct.bit % 8;\r\n                    struct.byte++;\r\n                }\r\n            } else {\r\n                delete struct.bit;\r\n                struct.byte += lastItem.Length;\r\n            }\r\n\r\n            if (struct.db !== undefined && struct.byte + lastItem.Length > 0xFFFF) {\r\n                struct.db++;\r\n                struct.byte = 0;\r\n                if (lastItem.Type === 'BOOL') {\r\n                    struct.bit = 0;\r\n                }\r\n            }\r\n\r\n            newItem.Address = this.struct2address(struct);\r\n            newItem.Type = lastItem.Type;\r\n            newItem.Length = lastItem.Length;\r\n            newItem.Unit = lastItem.Unit;\r\n            newItem.Role = lastItem.Role;\r\n            newItem.Room = lastItem.Room;\r\n            newItem.poll = lastItem.poll;\r\n            newItem.RW = lastItem.RW;\r\n            newItem.WP = lastItem.WP;\r\n        } else {\r\n            newItem.role = 'level';\r\n            newItem.Type = 'BOOL';\r\n            newItem.Length = '0.1';\r\n            newItem.poll = true;\r\n            if (this.nativeField === 'dbs') {\r\n                newItem.Address = 'DB1 0.0';\r\n            } else {\r\n                newItem.Address = '0.0';\r\n            }\r\n        }\r\n        data.push(newItem);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    deleteItem = (index) => {\r\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\r\n        data.splice(index, 1);\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    changeData = (data) => {\r\n        this.props.onChange(this.nativeField, data);\r\n    }\r\n\r\n    getDisable = (index, name) => {\r\n        return name === 'Length' &&\r\n            !['STRING', 'S7STRING', 'ARRAY'].includes(this.props.native[this.nativeField][index].type);\r\n    }\r\n\r\n    getSortedData = (data, orderBy, order) => {\r\n        this.fields = this.fields || this.getFields();\r\n\r\n        data = data || this.props.native[this.nativeField];\r\n        orderBy = orderBy || this.state.orderBy;\r\n        order = order || this.state.order;\r\n        let sortedData = [];\r\n        data.forEach((item, index) => {sortedData[index] = {item, $index: index}});\r\n        const field = this.fields.find(item => item.name === orderBy);\r\n\r\n        sortedData.sort((sortedItem1, sortedItem2) => {\r\n            let sort1;\r\n            let sort2;\r\n            if (orderBy === 'Address') {\r\n                const a1 = this.address2struct(sortedItem1.item.Address);\r\n                const a2 = this.address2struct(sortedItem2.item.Address);\r\n\r\n                sort1 = 0;\r\n                if (a1.db !== undefined) {\r\n                    sort1 = a1.db << 24;\r\n                }\r\n                if (a2.db !== undefined) {\r\n                    sort2 = a2.db << 24;\r\n                }\r\n                sort1 |= a1.byte << 8;\r\n                sort2 |= a2.byte << 8;\r\n                sort1 |= a1.bit || 0;\r\n                sort2 |= a2.bit || 0;\r\n            } else if (orderBy === '$index') {\r\n                sort1 = sortedItem1[orderBy];\r\n                sort2 = sortedItem2[orderBy];\r\n            } else if (field && field.type === 'number') {\r\n                sort1 = parseInt(sortedItem1.item[orderBy], 10);\r\n                sort2 = parseInt(sortedItem2.item[orderBy], 10);\r\n            } else {\r\n                sort1 = sortedItem1.item[orderBy];\r\n                sort2 = sortedItem2.item[orderBy];\r\n            }\r\n            return (order === 'asc' ? sort1 > sort2 : sort1 < sort2) ? 1 : -1;\r\n        });\r\n\r\n        return sortedData;\r\n    }\r\n\r\n    render() {\r\n        this.fields = this.fields || this.getFields();\r\n\r\n        return <Paper>\r\n            <RegisterTable\r\n                fields={this.fields}\r\n                getSortedData={this.getSortedData}\r\n                data={this.props.native[this.nativeField]}\r\n                changeParam={this.changeParam}\r\n                addItem={this.addItem}\r\n                deleteItem={this.deleteItem}\r\n                changeData={this.changeData}\r\n                getDisable={this.getDisable}\r\n                themeType={this.props.themeType}\r\n                rooms={this.props.rooms}\r\n                order={this.state.order}\r\n                orderBy={this.state.orderBy}\r\n                onChangeOrder={(orderBy, order) => {\r\n                    this.setState({orderBy, order});\r\n                    window.localStorage.setItem('Modbus.orderBy', orderBy);\r\n                    window.localStorage.setItem('Modbus.order', order);\r\n                }}\r\n            />\r\n        </Paper>\r\n    }\r\n}\r\n\r\nBaseRegisters.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n};\r\n\r\nexport default BaseRegisters;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nclass Inputs extends BaseRegisters {\r\n    nativeField = 'inputs'\r\n}\r\n\r\nInputs.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Inputs;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nclass Outputs extends BaseRegisters {\r\n    nativeField = 'outputs'\r\n}\r\n\r\nOutputs.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Outputs;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nclass Marker extends BaseRegisters {\r\n    nativeField = 'markers'\r\n}\r\n\r\nMarker.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Marker;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport BaseRegisters from './BaseRegisters';\r\n\r\nclass Dbs extends BaseRegisters {\r\n    nativeField = 'dbs'\r\n}\r\n\r\nDbs.propTypes = {\r\n    common: PropTypes.object.isRequired,\r\n    native: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    adapterName: PropTypes.string.isRequired,\r\n    onError: PropTypes.func,\r\n    onLoad: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    changed: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Dbs;\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport TabOptions from './Tabs/Options';\r\nimport TabInputs from './Tabs/Inputs';\r\nimport TabOutputs from './Tabs/Outputs';\r\nimport TabMarker from './Tabs/Marker';\r\nimport TabDbs from './Tabs/DBs';\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto',\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\r\n        overflow: 'auto'\r\n    },\r\n    tab: {\r\n        width: '100%',\r\n        minHeight: '100%'\r\n    }\r\n});\r\n\r\nconst tabs = [\r\n    {\r\n        name: 'general',\r\n        title: 'General',\r\n        component: TabOptions,\r\n    },\r\n    {\r\n        name: 'inputs',\r\n        title: 'Inputs',\r\n        component: TabInputs,\r\n    },\r\n    {\r\n        name: 'outputs',\r\n        title: 'Outputs',\r\n        component: TabOutputs,\r\n    },\r\n    {\r\n        name: 'marker',\r\n        title: 'Marker',\r\n        component: TabMarker,\r\n    },\r\n    {\r\n        name: 'dbs',\r\n        title: 'DBs',\r\n        component: TabDbs,\r\n    },\r\n]\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {...props};\r\n        extendedProps.encryptedFields = ['pass'];\r\n\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        super(props, extendedProps);\r\n        this.state.moreLoaded = false;\r\n        this.state.rooms = null;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        super.onConnectionReady()\r\n        this.socket.getForeignObjects('enum.rooms.*', 'enum')\r\n            .then(rooms =>\r\n                this.setState({moreLoaded: true, rooms}));\r\n    }\r\n\r\n    getSelectedTab() {\r\n        const selectedTab = this.state.selectedTab;\r\n        if (!selectedTab) {\r\n            return 0;\r\n        } else {\r\n            return tabs.findIndex(tab => tab.name === selectedTab);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded || !this.state.moreLoaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType} />\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <SnackbarProvider>\r\n                <div className=\"App\" style={{background: this.state.theme.palette.background.default, color: this.state.theme.palette.text.primary}}>\r\n                    <AppBar position=\"static\">\r\n                        <Tabs\r\n                            value={this.getSelectedTab()}\r\n                            onChange={(e, index) => this.selectTab(tabs[index].name, index)}\r\n                            variant=\"scrollable\" scrollButtons=\"auto\">\r\n                            {tabs.map(tab => <Tab\r\n                                label={tab.icon ? <>{tab.icon}{I18n.t(tab.title)}</> : I18n.t(tab.title)}\r\n                                data-name={tab.name}\r\n                                key={tab.name}\r\n                                title={tab.tooltip ? I18n.t(tab.tooltip) : undefined}\r\n                            />)}\r\n                        </Tabs>\r\n                    </AppBar>\r\n                    <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n                        {tabs.map((tab, index) => {\r\n                            const TabComponent = tab.component;\r\n                            if (this.state.selectedTab) {\r\n                                if (this.state.selectedTab !== tab.name) {\r\n                                    return null;\r\n                                }\r\n                            } else {\r\n                                if (index !== 0) {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                            return <TabComponent\r\n                                key={tab.name}\r\n                                themeType={this.state.themeType}\r\n                                common={this.common}\r\n                                socket={this.socket}\r\n                                native={this.state.native}\r\n                                onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\r\n                                onLoad={native => this.onLoadConfig(native)}\r\n                                instance={this.instance}\r\n                                adapterName={this.adapterName}\r\n                                changed={this.state.changed}\r\n                                onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                                changeNative={value => this.setState({native: value, changed: this.getIsChanged(value)})}\r\n                                rooms={this.state.rooms}\r\n                            />\r\n                        })}\r\n                        {/*<pre>{JSON.stringify(this.state.native, null, 2)}</pre>*/}\r\n                    </div>\r\n                    {this.renderError()}\r\n                    {this.renderSaveCloseButtons()}\r\n                </div>\r\n            </SnackbarProvider>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {version} from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 's7';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nif (false && window.location.host !== 'localhost:3000') {\r\n    Sentry.init({\r\n        dsn: 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57',\r\n        release: `iobroker.${window.adapterName}@${version}`,\r\n        integrations: [\r\n            new SentryIntegrations.Dedupe()\r\n        ]\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}